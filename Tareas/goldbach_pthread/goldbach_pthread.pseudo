shared_data {
    sums_vector
    numbers_vec
    number_counter
    number_of_threads
}

private_data {
    position
    shared_data
    goldbach_number
    shared_data
}

main(argc, argv[]):
    if(shared)
        shared_data input := stdin
        shared_data output := stdout
        shared_data thread_position := 0
        shared_data number_counter := 0
        shared_data number_of_threads := number_of_processors
        shared_data sums_vector = create_struc_sums_vector

        if(argc == 2)
            shared_data number_of_threads := integer(argv[1])
        end if

        input_number(shared_data)
        create_threads(shared_data number_counter, run_thread)
        
        print(shared_data sums_vector)
        
        free(shared_data sums_vector)
        free(shared_data numbers_queue)
        free(shared_data)
    end if

run_thread:
    
    //Funcion que determina donde empieza cada hilo
    start = where_to_start()

    //Funcion que determina donde termina cada hilo
    end = where_to_end()
    for i = start to end do 
        number := shared_data numbers_vec[i]
        private_data position := i
        goldbach(private_data, number)
    end for
            
  
 
input_number:
    number := 0
    size := 10

    shared_data numbers_vec = create_numbers_array

    if shared_data numbers_vec :
        while fscanf(shared_data->input, "%", &number) == 1 do :

            if shared_data number_counter == size 
                realloc (shared_data numbers_vec)
            end if

            shared_data numbers_vec[shared_data number_counter] = number
        end while
    
    if(number_of_threads>number_counter)
        number_of_threads = number_counter
    end if



-----------Ejemplos--------------

thread 1:
    //aqui agarra el rango de numeros que le indique la funcion y
    //resuelve sus respectivas sumas de goldbach
    run_thread:
        //Funcion que determina donde empieza cada hilo
        start = where_to_start()

        //Funcion que determina donde termina cada hilo
        end = where_to_end()
        for i = start to end do 
            number := shared_data numbers_vec[i]
            private_data position := i
            goldbach(private_data, number)
        end for

    // cada hilo resuelve por aparte la cantidad de sumas de cada numero
    // que esta dentro del rango de su respectiva cantidad de numeros
