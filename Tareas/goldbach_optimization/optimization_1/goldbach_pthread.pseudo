shared_data {
    sums_vector
    numbers_vec
    number_counter
    thread_position
    sem_get_position
    number_of_threads
}

private_data {
    position
    shared_data
    goldbach_number
}

main(argc, argv[]):
    if(shared)
        shared_data input := stdin
        shared_data output := stdout
        shared_data thread_position := 0
        shared_data number_counter := 0
        shared_data number_of_threads := number_of_processors
        shared_data sums_vector = create_struc_sums_vector

        if(argc == 2)
            shared_data number_of_threads := integer(argv[1])
        end if

        input_number(shared_data)
        create_threads(shared_data number_counter, run_thread)
        
        print(shared_data sums_vector)
        
        free(shared_data sums_vector)
        free(shared_data numbers_queue)
        free(shared_data)
    end if

run_thread:
  while ( !(queue_is_empty(&shared_data->numbers_queue)) )
    wait(&shared_data->sem_get_position);
    queue_dequeue( numbers_queue, goldbach_number);
    private_data position = shared_data thread_position;
    shared_data thread_position++;
    signal(&shared_data->sem_get_position);
    goldbach(private_data, private_data goldbach_number);
  end while

 
input_number:
    number := 0
    size := 10

    shared_data numbers_vec = create_numbers_array

    if shared_data numbers_vec :
        while fscanf(shared_data->input, "%", &number) == 1 do :

            if shared_data number_counter == size 
                realloc (shared_data numbers_vec)
            end if

            shared_data numbers_vec[shared_data number_counter] = number
        
        end while



-----------Ejemplos--------------

threads:
    //aqui cada hilo agarra cualquier numero que pueda y hace goldbach
    run_thread:
        while ( !(queue_is_empty(&shared_data->numbers_queue)) )
            wait(&shared_data->sem_get_position);
            queue_dequeue(numbers_queue, goldbach_number);
            private_data position = shared_data thread_position;
            shared_data thread_position++;
            signal(&shared_data->sem_get_position);
            goldbach(private_data, goldbach_number);
    end while


