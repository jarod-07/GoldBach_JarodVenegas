shared_data {
  sums_vector;
  numbers_vec;
  prime_vector;
  number_counter;
  number_of_threads;
}

private_data {
  position;
  thread_id;
  goldbach_number;
  shared_data;
}

main(argc, argv[]):
    if(shared)
        shared_data input := stdin
        shared_data output := stdout
        shared_data thread_position := 0
        shared_data number_counter := 0
        shared_data number_of_threads := number_of_processors
        shared_data sums_vector = create_struc_sums_vector

        if(argc == 2)
            shared_data number_of_threads := integer(argv[1])
        end if
        
        size
        input_number(shared_data, size)
        create_prime_vector(shared_data, size)
        create_threads(shared_data number_counter, run_thread)
        complete_structure(shared_data)
        print(shared_data sums_vector)
        
        free(shared_data)
        // Y todo lo que hay que librerar dentro de shared_data
    end if

run_thread:

 
input_number:
    number := 0
    size := 10

    shared_data numbers_vec = create_numbers_array

    if shared_data numbers_vec :
        while fscanf(shared_data->input, "%", &number) == 1 do :

            if shared_data number_counter == size 
                realloc (shared_data numbers_vec)
            end if

            shared_data numbers_vec[shared_data number_counter] = number
        end while

run_thread:
  for i = 0 to shared_data->number_counter
    private_data->goldbach_number = shared_data->numbers_vec[i]
    goldbach(private_data, i)

create_prime_vector:
  // Se crea un vector con el numero mas grande de los numeros ingresados
  shared_data->prime_vector[2] = 1;
  // Por si el numero es impar
  if (even_odd(size) == 0)
    size = size - 1;
  end if
  for (int64_t i = 1; i <= size / 2; i = i + 3) 
    // Aqui se revisan solo los numeros impares que son los posibles primos

    // Revisa el impar mas proximo
    if (is_prime((i * 2) + 1)) 
      shared_data->prime_vector[(i * 2) + 1] = 1;
    end if

    // Revisa el siguiente impar del anterior
    if (is_prime((i * 2) + 3)) 
      shared_data->prime_vector[(i * 2) + 3] = 1;
    end if

    // Revisa el siguiente impar del anterior
    if (is_prime((i * 2) + 5))
      shared_data->prime_vector[(i * 2) + 5] = 1;
    end if
  end for

-----------Ejemplos--------------

threads:
    //todos los threads agarran el mismo numero y hacen cierta cantidad
    // de iteraciones para las sumas de cada numero
    run_thread:
        for i = 0 to shared_data->number_counter
            private_data->goldbach_number = shared_data->numbers_vec[i]
            goldbach(private_data, i)
    
    // cuando tienen el numero se se van a la conjetura correspondiente y
    // hacen las itreaciones que le corresponden

